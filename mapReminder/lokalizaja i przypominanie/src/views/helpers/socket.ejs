<script>
// global variables
var socket = null
var pos=null
var readyFired=false
var map=null

function login(){
    const email = document.getElementById('email').value
    const password = document.getElementById('password').value
    if (!email || !password)
        return 
    return connect(email, password)
}

var signUpBlocked= null
function signUp(){
    if (signUpBlocked) return
    signUpBlocked=true
    const email = document.getElementById('email').value
    const password = document.getElementById('password').value
    const password2 = document.getElementById('password2').value
    if (!email || !password || !password2)
        return 

    fetch('/sign-up', {
        method: 'POST',
        headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
        },
        body: JSON.stringify({email, password, password2})
    })
    .then(res=>{
        if (res.status===200){
            return connect(email, password) 
        } 
        return res.json().then(e=>alert(e.message || 'Unauthorised'))
    })
    return
}

var connectionStatus
function connect(email, password){


    if (connectionStatus) return
    connectionStatus = 'pending'
    socket = io.connect('/')
    socket.on('connect', function(){
        document.getElementById('auth').style.display = 'none'
        document.getElementById('app').style.display = 'none'
        document.getElementById('spinner').style.display = ''
        connectionStatus = 'ready'
        socket.emit('authenticate', {email, password})
        socket.on('authenticate-done', ()=>{
            console.log('Socket ready - authenticated')
            document.getElementById('spinner').style.display = 'none'
            document.getElementById('app').style.display = ''
            !readyFired && ready()
            socket.emit('list')
        })
        socket.on('put-done', addLocation)
        socket.on('unsnooze-done', loc=>{
            if (locations[loc.id]){
                addLocation({...locations[loc.id].loc, active: true})
            }
        })
        socket.on('snooze-done', loc=>{
            addLocation(loc)
        })
        socket.on('del-done', deleteFromMap)
        socket.on('list-done', locs=>{
            return ((locs||{}).locations||[]).forEach(addLocation)
        })
        socket.on('near', foundNear)

        socket.on('err', err=>{
            if (err.event === 'authenticate'){
                document.getElementById('auth').style.display = ''
                document.getElementById('spinner').style.display = 'none'
                document.getElementById('app').style.display = 'none'
                socket.disconnect()
            }
            alert(`error during ${err.event}: ${err.message}`)
            //location.reload()
        })

        socket.on('disconnect', _=>{
            alert('disconected from server, trying again')
            return connect(email, password)
        })
    })
}

function move(){
    const lat=prompt('lat')
    const lng=prompt('lng')
    locationfound({latlng: {lat, lng}})    
    console.log('ustawiono recznie')
}
</script>