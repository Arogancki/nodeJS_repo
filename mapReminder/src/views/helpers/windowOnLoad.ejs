<script>

var locations = {}
var locationsCircles = {}
var YouAreHere=null
var locationfound2=()=>{}

function foundNear(loc){
    if (confirm(`${loc.name}: ${loc.description}. Delete this?`)){
        return socket.emit('del', {id: loc.id})
    }
    const time = (prompt('Type time for snooze (sek)') || 60) * 1000
    return socket.emit('snooze', {id: loc.id, time})
}

function deleteFromMap(loc){
    if (locations[loc.id]){
        map.removeLayer(locations[loc.id])
        delete locations[loc.id]
    }
}

function addLocation(loc){
    if (locations[loc.id]){
        if (locations[loc.id].active !== loc.active){
            deleteFromMap(loc)
        }
        else{
            return
        }
    } 
    const marker = L.marker({lat: loc.latitude, lng: loc.longitude}, {
        title: loc.name,
        icon: loc.active
        ? new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        })
        : new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        })
    })
    marker.addTo(map)
    marker.bindPopup(`${loc.name}: ${loc.description}`)
    const circle = L.circle([loc.latitude, loc.longitude], {radius: corToMet(loc.tolerance)})
    circle.addTo(map)
    marker.on('mouseover', function (e) {
        this.openPopup()
    })
    marker.on('mouseout', function (e) {
        this.closePopup()
    })
    locationsCircles[loc.id]=circle
    locations[loc.id]=marker
}

function ready(){
    readyFired=true
    map = L.map('map').fitWorld()

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        maxZoom: 18
    }).addTo(map)

    function onMapClick(e) {
        if(confirm('Add a new reminder')){
            const name = prompt('Type name')
            if (!name) return alert('name is required')
            const description = prompt('Type description') || ''
            const toleranceText = prompt('Type tolerance in meters (default is 50 meters)') || 50
            const tolerance = Number(toleranceText)
            if (isNaN(tolerance)) return alert('Tolerance has to be a number')
            if (tolerance<10) return alert('Tolerance has to be at least 10 meters')
            socket.emit('put', {tolerance: metToCor(tolerance), name, description, 
                latitude: e.latlng.lat, longitude: e.latlng.lng})
            console.log(e.latlng)
        }
    }
    map.on('click', onMapClick)

    function locationfound(pos){
        if (!socket || !pos){
            return console.log('waiting')
        }
        console.log(pos.latlng)
        socket.emit('chase', {latitude: pos.latlng.lat, longitude: pos.latlng.lng})
        // everything ready
        YouAreHere && map.removeLayer(YouAreHere)
        YouAreHere=L.marker(pos.latlng, {
            title: 'You are here',
            icon: new L.Icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            })
        })
        YouAreHere.addTo(map)
        YouAreHere.on('mouseover', function (e) {
            this.openPopup()
        })
        YouAreHere.on('mouseout', function (e) {
            this.closePopup()
        })
    }
    locationfound2=locationfound

    function notSupported(){
        var notSupported = true
        //podmnienic ttu nahtml notsupported
        console.error('nie bedzie dzialac')
    }

    // if (navigator.geolocation) {
    //     navigator.geolocation.getCurrentPosition((p)=>locationfound({latlng: {
    //         lat: p.coords.latitude, 
    //         lng: p.coords.longitude
    //     }}))
    // } else {
    //     notSupported()
    // }
    map.locate({setView: true, watch: true, maxZoom: 16})
    map.on('locationfound', locationfound)
    map.on('notSupported', notSupported)

}
</script>
