<script>

var locations = {}
var locationsCircles = {}
var YouAreHere=null

var pending = {}
function foundNear(loc){
    if (pending[loc.id]) return
    pending[loc.id]=loc
    const delLater = ()=>setTimeout(()=>delete pending[loc.id], 3000)
    if (confirm(`${loc.name}: ${loc.description}. Delete this?`)){
        delLater()
        return socket.emit('del', {id: loc.id})
    }
    let time = null
    do{
        time = prompt(`Type time for snooze (sek, min 10, max ${1000*60*60*24} (day), default: 60)`) || 60
    } while(isNaN(time) || time < 10)
    delLater()
    return socket.emit('snooze', {id: loc.id, time: time * 1000})
}

function deleteFromMap(loc){
    if (locations[loc.id]){
        map.removeLayer(locations[loc.id])
        delete locations[loc.id]
        map.removeLayer(locationsCircles[loc.id])
        delete locationsCircles[loc.id]
    }
}

function addLocation(loc){
    if (locations[loc.id]){
        if (locations[loc.id].loc.active !== loc.active){
            deleteFromMap(loc)
        }
        else{
            return
        }
    } 
    const marker = L.marker({lat: loc.latitude, lng: loc.longitude}, {
        title: loc.name,
        icon: loc.active
        ? new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        })
        : new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        })
    })
    marker.addTo(map)
    marker.bindPopup(`${loc.name}: ${loc.description}`)
    const circle = L.circle([loc.latitude, loc.longitude], {
        radius: corToMet(loc.tolerance),
        color: loc.active ? 'blue' : 'yellow'
    })
    circle.addTo(map)
    marker.on('mouseover', function (e) {
        this.openPopup()
    })
    marker.on('mouseout', function (e) {
        this.closePopup()
    })
    locationsCircles[loc.id]=circle
    locationsCircles[loc.id].loc=loc
    locations[loc.id]=marker
    locations[loc.id].loc=loc
    if (prevPos){
        socket.emit('chase', {latitude: prevPos.latlng.lat, longitude: prevPos.latlng.lng})
    }
}

function onMapClick(e) {
    if(confirm('Add a new reminder')){
        const name = prompt('Type name')
        if (!name) return alert('name is required')
        const description = prompt('Type description') || ''
        const toleranceText = prompt('Type tolerance in meters (default is 50 meters)') || 50
        const tolerance = Number(toleranceText)
        if (isNaN(tolerance)) return alert('Tolerance has to be a number')
        if (tolerance<10) return alert('Tolerance has to be at least 10 meters')
        socket.emit('put', {tolerance: metToCor(tolerance), name, description, 
            latitude: e.latlng.lat, longitude: e.latlng.lng})
        console.log('New: ', e.latlng)
    }
}

var prevPos = null
function locationfound(pos){
    if (!socket || !pos){
        return console.log('not ready yet', socket, pos)
    }
    prevPos = pos
    console.log('Your position:', pos.latlng)
    // everything ready
    YouAreHere && map.removeLayer(YouAreHere)
    YouAreHere=L.marker(pos.latlng, {
        title: 'You are here',
        icon: new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        })
    })
    YouAreHere.addTo(map)
    YouAreHere.on('mouseover', function (e) {
        this.openPopup()
    })
    YouAreHere.on('mouseout', function (e) {
        this.closePopup()
    })
    socket.emit('chase', {latitude: pos.latlng.lat, longitude: pos.latlng.lng})
}

function notSupported(){
    var notSupported = true
    //podmnienic ttu nahtml notsupported
    console.error('nie bedzie dzialac')
}

function ready(){
    readyFired=true
    map = L.map('map').fitWorld()

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        maxZoom: 18
    }).addTo(map)

    map.on('click', onMapClick)

    // if (navigator.geolocation) {
    //     navigator.geolocation.getCurrentPosition((p)=>locationfound({latlng: {
    //         lat: p.coords.latitude, 
    //         lng: p.coords.longitude
    //     }}))
    // } else {
    //     notSupported()
    // }
    map.locate({setView: true, watch: true, maxZoom: 16})
    setTimeout(()=>{
        map.on('locationfound', locationfound)
        map.on('notSupported', notSupported)
    }, 1000)
}
</script>
