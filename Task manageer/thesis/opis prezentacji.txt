1. Przedstawienie sie
dzien dobry, nazywam sie Artur Ziemba, a temat mojej pracy inzynierskiej to Aplikacja do zarzadzania zadaniami jako przyklad uzycia technologii nodejs. Moim promotorem pracy jest Piotr Blaszynki. wybralem ten temat dlatego ze chcialbym zostac specjalista w technologiach backendowych oraz interesuje sie rozwijaniem aplikacji przy uzyciu wlasnie technologi nodejs.

2. Krotko o technologi nodejs
Node.js jest cross-platformowym działającym niezależnie od środowiska językiem programowania, napisanym w językach c/c++ oraz javascript, wydanym 27 marca 2009 roku, zaprojektowanym przez Ryana Dahla. 
sluzy do twoprznie serwerów i narzędzi sieciowych, działających po stronie serwera. 
Cieszy się dużą popularnością, dzięki czemu, mimo względnie krótkiego okresu życia środowiska, zaowocowało ogromną ilością projektów open-source, tysiącami członków należących do społeczności okołojęzykowej oraz powstaniem wydarzeń  takimi jak NodeConf, Node Interactive.
Obecnie wiele najwiekszych firm korzysta z Node.js. Groupon, IBM, Linkedln, Microsoft, Netflix, PayPal, Yahoo. 

Node.js pozwala na zoptymalizowanie pracy oraz uzyskanie skalowalności dzięki asynchronicznemu przetwarzaniu danych dostarczanych do aplikacji, w związku z czym idealnie nadaje się do obsługi komunikacji wymagającej pracy w czasie rzeczywistym. 
Funkcje napisane w Node.js wykonują się równolegle, korzystając z tak zwanych wywołań zwrotnych (ang. callback).
Dzięki temu nie powstaje problem blokowania określonych funkcjonalności programu w czasie pracy innych niezależnych jego części. 
Przy pomocy wywołań zwrotnych możemy zapewnić zasygnalizowanie lub zwrócenie uzyskanych wyników, bądź obsługę błędu powstałego w czasie działania bloku kodu.

Modułowość
Praca z Node.js opiera się głównie o korzystanie ze zbioru modułów - biliotek wspierających określone funkcjonalności. 
Zapewniają one pracę między innymi z plikami systemowymi, z urządzeniami wejścia/wyjścia, protokołami internetowymi (dns, http, tcp, spdy), plikami binarnymi, źródłami danych oraz funkcjami kryptograficznymi. 
Zmniejszają one złożoność czyli nakład pracy przy tworzeniu własnej funkcjonalności.

Paradygmat
Architektura Node.js pozwala na tworzenie oprogramowania sterowanego zdarzeniami.
Jest to paradygmat programowania, w którym kolejność wykonywania kodu zależy od zdarzeń mających miejsce w czasie życia aplikacji (run time), na przykład interakcji użytkownika, czy otrzymania określonych sygnałów. 
Tak jak mowilem program w technologi nodejs dziala asynchornocznie dzieki obsługi asynchronicznego wyjscia/wyjscia 
uzywajac biblioteki multiplatformowej języka c - libuv. 
Wątki te działają na wielu rdzeniach systemu, na którym działa serwer. 
Wątek główny przydziela zadania dla wątków kolejno ze współdzielonej kolejki funkcji.
Kiedy wątek zakończy wykonywanie przydzielonego mu zadania, informuje o tym wątek główny.
Biblioteka libuv zajmuje się odpowiednim podziałem zadań oraz przydzieleniem zasobów tak, aby w jak najlepszy sposób wyważyć nakład pracy między wieloma wątkami. 

3. Specyfikacja problemu
Stworzony mial zostac system do zarządzania tablicami zadań.
musi ggo charakteryzowac:
autoryzowany dostęp dla użytkowników systemu,
intuicyjna aplikacji,
wspolpraca miedzyużytkownikami,
przejrzysty sposób prezentować proces realizacji poszczególnych zadań zorganizowanych w tablicach.
Właściciel określonej tablicy powinien mieć możliwość zarządzania dostępem,
Wymiana komunikatów w modelu klient-serwer.
System współpracuje z bazą danych.

4.Diagram przypadków użycia
Poniższy diagram uml przedstawia schemat użytkowania systemu.
Określone zostały trzy poziomy klientów korzystających z aplikacji, które określają zakres udostępnionej funkcjonalności.

6.Mean Stack
Do opracowania opracowania calej aplikacji zdecydowałem się skorzystać z Mean Stack. 
Skrót odnosi się do frameworków oraz technolgii Mongodb, Express, AngularJS oraz Node.js. 
Do użycia wszystkich wymagany jest tylko jeden język programowania - javaScript, zarówno do obsługi warstwy frontendowej aplikacji jak i backendowej. 

Technologia node js zostala juz opisana wiec szybko 2 slowa o reszcie:
mongodb
system zarządzania bazą danych zorientowany na dokumenty 
Operuje na nierelacyjnych bazach danych. czyli No sql
Używa struktur json jako schematów budowy bazy danych.

ExpressJS
Framework służący do szybkiego wymagającego jak najmniejszych nakładów pracy wytwarzania zarówno backendu aplikacji internetowych, jak i aplikacji mobilnych.
Jest to najpopularniejszy framework do tworzenia serwerów w technologii Node.js.

AngularJS
Wykorzystujący wzorzec projektowy MVC/MVP polegający na oddzieleniu od siebie poszczególnych warstw aplikacji - logiki, widoku oraz kontrolera lub prezetera, framework wykorzystujący dodatkowe tagi w języku html w celu prostego w obsłudze i niewymagającego dodatkowej logiki tworzenia dynamicznych stron internetowych.

5. Komunikacja
Do komunikacji między warstwą frontendową i backendowową po stronie klienta wykorzystałem wysokopoziomową bibliotekę Ajax oraz technologię Restful api. 
Ajax polega na zarządzaniu asynchroniczną komunikacją. 
Dzięki temu aplikacja może wykonywać inne funkcje, mimo oczekiwania na odpowiedź ze strony serwera, za sprawą odseparowania warstwy wymiany danych od pozostałych warstw aplikacji.
Do opisu wymienianych struktur użyłem standardu json.

Przeplyw danych przez aplikacje przy pomocy technologi Mean
Angular prezentuje użytkownikowi dynamiczną aplikację internetową, odpowiada za przyjmowanie danych. z pomocą ajaxa wysyła oraz odbiera dane wysyłane do serwera. 
Serwer Node.js z użyciem technologii express, wykorzystując metodę routingu, dopasowuje zapytanie do odpowiednich funkcji serwisu, przetwarza otrzymane dane. Baza danych zarzadzana przez Mongodb przechowuje informacje użytkowników serwisu oraz w odpowiedzi zwraca odpowiednie dane z powrotem do expresa i on spowrotem do frontendu prezentując dane użytkownikowi. 

Teraz pare slajdow dotyczxacych testow - najpierw funkcjonalne manualne
Do testów została użyta przeglądarka Google Chrome
(opisac slajdyu)

Teraz testy niefunkcjonalne
Zostaly wykonane przy uzyciu modulu nodejs request 
Każdy test został wykonany ok 5 razy, a podane wartości przedstawiają średnią czasu pracy.

Testy wydajnościowe
zachowanie serwisu przy różnym obciążeniu bazy danych. 
Mimo dużej ilości posiadanych informacji korzystanie z serwisu jest komfortowe, ponieważ czas obsługi zapytania nie zostaje znacząco wydłużony.

Testy obciążeniowe serwera
zachowanie aplikacji w przypadku równoczesnej obsługi wielu przychodzących zapytań. 
Przy dużej liczbie przychodzących zapytań użytkowanie serwisu jest wciąż komfortowe. Aplikacja wykazuje się skalowalnością.

Testy sprawnościowe serwera
ilość kolejno wysłanych po sobie zapytań, które zostały obsłużone przez serwer w określonym czasie. 
Osiągnięte wyniki są zadowalające, jednak łatwo zauważyć, że technologia ta wykazuje się największą sprawnością przy obsłudze równoległych zapytań. 
Średni uzyskany czas dla obsługi rownoleglych jest prawie 2 razy krotszy niz wyslanych koljeno


Podsumowanie 
Zostały osiągnięte wszystkie założenia oraz wymagania aplikacji.
Stworzony projekt doskonale nadaje się do użytkowania przez zorganizowane zespoły do wykonywania określonych zadań.  
Dostarcza przejrzysty interfejs oraz nieskomplikowaną prezentację danych dla końcowych użytkowników.
Niewątpliwie największymi zaletami tej technologii jest łatwość budowania wymagających serwisów internetowych poprzez użycie asynchronicznej obsługi wejścia/wyjścia, które pozwala na przetwarzanie wielu funkcji w jednym czasie, tworząc wyjątkowo szybkie w działaniu aplikacje, dzieki czemu jest idealnym rozwiązaniem w kwestii pracy nad wieloma rozwiązaniami webowymi. 
Na slajdzie maskota nodsjs